openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: API for PetPlace.

paths:
  /facilities:
    get:
      summary: Get all facilities
      responses:
        '200':
          description: A list of facilities
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Facility'

    post:
      summary: Create a new facility
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Facility'
      responses:
        '201':
          description: Facility created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facility'

  /facilities/{id}:
    get:
      summary: Get a facility by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the facility
          schema:
            type: integer
      responses:
        '200':
          description: A facility object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facility'
        '404':
          description: Facility not found

    put:
      summary: Update a facility
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the facility
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Facility'
      responses:
        '200':
          description: Facility updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facility'
        '404':
          description: Facility not found

    delete:
      summary: Delete a facility
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the facility
          schema:
            type: integer
      responses:
        '200':
          description: Facility deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Facility not found
  /medicalhistory:
    get:
      summary: Get all medical histories
      responses:
        '200':
          description: A list of medical histories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MedicalHistory'

    post:
      summary: Create a new medical history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalHistory'
      responses:
        '201':
          description: Medical history created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'

  /medicalhistory/{id}:
    get:
      summary: Get a medical history by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the medical history
          schema:
            type: integer
      responses:
        '200':
          description: A medical history object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'
        '404':
          description: Medical history not found

    put:
      summary: Update a medical history
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the medical history
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalHistory'
      responses:
        '200':
          description: Medical history updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'
        '404':
          description: Medical history not found

    delete:
      summary: Delete a medical history
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the medical history
          schema:
            type: integer
      responses:
        '200':
          description: Medical history deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Medical history not found
  /pets:
    get:
      summary: Get all pets
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'

    post:
      summary: Create a new pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Pet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  /pets/{id}:
    get:
      summary: Get a pet by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pet
          schema:
            type: integer
      responses:
        '200':
          description: A pet object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found

    put:
      summary: Update a pet
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pet
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found

    delete:
      summary: Delete a pet
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pet
          schema:
            type: integer
      responses:
        '200':
          description: Pet deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Pet not found
  /clients:
    get:
      summary: Get all clients
      responses:
        '200':
          description: A list of clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'

    post:
      summary: Create a new client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Client created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  /clients/{id}:
    get:
      summary: Get a client by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the client
          schema:
            type: integer
      responses:
        '200':
          description: A client object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found

    put:
      summary: Update a client
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the client
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: Client updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found

    delete:
      summary: Delete a client
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the client
          schema:
            type: integer
      responses:
        '200':
          description: Client deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Client not found
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'

    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product
          schema:
            type: integer
      responses:
        '200':
          description: A product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      summary: Update a product
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    delete:
      summary: Delete a product
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Product not found
  /professionals:
    get:
      summary: Get all professionals
      responses:
        '200':
          description: A list of professionals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Professional'

    post:
      summary: Create a new professional
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professional'
      responses:
        '201':
          description: Professional created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'

  /professionals/{id}:
    get:
      summary: Get a professional by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the professional
          schema:
            type: integer
      responses:
        '200':
          description: A professional object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
        '404':
          description: Professional not found

    put:
      summary: Update a professional
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the professional
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professional'
      responses:
        '200':
          description: Professional updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
        '404':
          description: Professional not found

    delete:
      summary: Delete a professional
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the professional
          schema:
            type: integer
      responses:
        '200':
          description: Professional deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Professional not found
  /report/monthly-earnings:
    get:
      summary: Get monthly earnings
      responses:
        '200':
          description: Monthly earnings data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    year:
                      type: integer
                    month:
                      type: integer
                    total:
                      type: number

  /report/mostRequestedServices:
    get:
      summary: Get most requested services
      responses:
        '200':
          description: Most requested services data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    totalAppointments:
                      type: integer

  /report/mostSoldProducts:
    get:
      summary: Get most sold products
      responses:
        '200':
          description: Most sold products data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: integer
                    totalQuantity:
                      type: integer

  /report/registeredClientsAndPets:
    get:
      summary: Get registered clients and pets
      responses:
        '200':
          description: Registered clients and pets data
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalClients:
                    type: integer
                  totalPets:
                    type: integer
                  monthlyData:
                    type: array
                    items:
                      type: object
                      properties:
                        month:
                          type: string
                        totalClients:
                          type: integer
                        totalPets:
                          type: integer

  /report/mostActiveProfessionals:
    get:
      summary: Get most active professionals
      responses:
        '200':
          description: Most active professionals data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    professionalId:
                      type: integer
                    professionalName:
                      type: string
                    professionalDni:
                      type: string
                    turnsAssigned:
                      type: integer
  /appointments:
    get:
      summary: Get all appointments
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'

    post:
      summary: Create a new appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'

  /appointments/{id}:
    get:
      summary: Get an appointment by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the appointment
          schema:
            type: integer
      responses:
        '200':
          description: An appointment object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found

    put:
      summary: Update an appointment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the appointment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found

    delete:
      summary: Delete an appointment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the appointment
          schema:
            type: integer
      responses:
        '200':
          description: Appointment deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Appointment not found
  /payment/create:
    post:
      summary: Create a payment order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payer:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                itemsToPay:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      quantity:
                        type: integer
                      unit_price:
                        type: number
      responses:
        '200':
          description: Payment order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string

  /payment/save/{paymentId}:
    post:
      summary: Save payment information
      parameters:
        - name: paymentId
          in: path
          required: true
          description: The ID of the payment
          schema:
            type: string
      responses:
        '200':
          description: Payment information saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentData:
                    type: object
                  orderData:
                    type: object
        '404':
          description: Payment not found
  /types:
    get:
      summary: Get all types
      responses:
        '200':
          description: A list of types
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Type'

  /types/{id}:
    get:
      summary: Get a type by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the type
          schema:
            type: integer
      responses:
        '200':
          description: A type object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
        '404':
          description: Type not found
  /observation:
    get:
      summary: Get all observations
      responses:
        '200':
          description: A list of observations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Observation'

    post:
      summary: Create a new observation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'
      responses:
        '201':
          description: Observation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'

  /observation/{id}:
    get:
      summary: Get an observation by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the observation
          schema:
            type: integer
      responses:
        '200':
          description: An observation object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '404':
          description: Observation not found

    put:
      summary: Update an observation
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the observation
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'
      responses:
        '200':
          description: Observation updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '404':
          description: Observation not found

    delete:
      summary: Delete an observation
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the observation
          schema:
            type: integer
      responses:
        '200':
          description: Observation deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Observation not found
  /orders:
    get:
      summary: Get all orders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      summary: Get an order by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
      responses:
        '200':
          description: An order object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /vaccines:
    get:
      summary: Get all vaccines
      responses:
        '200':
          description: A list of vaccines
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vaccine'

    post:
      summary: Create a new vaccine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccine'
      responses:
        '201':
          description: Vaccine created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccine'

  /vaccines/{id}:
    get:
      summary: Get a vaccine by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the vaccine
          schema:
            type: integer
      responses:
        '200':
          description: A vaccine object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccine'
        '404':
          description: Vaccine not found

    put:
      summary: Update a vaccine
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the vaccine
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccine'
      responses:
        '200':
          description: Vaccine updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccine'
        '404':
          description: Vaccine not found

    delete:
      summary: Delete a vaccine
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the vaccine
          schema:
            type: integer
      responses:
        '200':
          description: Vaccine deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Vaccine not found

components:
  schemas:
    Facility:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number

    MedicalHistory:
      type: object
      properties:
        id:
          type: integer
        petId:
          type: integer

    Pet:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        birthdate:
          type: string
          format: date
        type:
          type: integer
        breed:
          type: string
        weight:
          type: number
        clientId:
          type: integer

    Client:
      type: object
      properties:
        id:
          type: integer
        dni:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        birthDate:
          type: string
          format: date

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        category:
          type: string

    Professional:
      type: object
      properties:
        id:
          type: integer
        dni:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        birthDate:
          type: string
          format: date

    Observation:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        professional:
          type: integer
        description:
          type: string
        medicalHistoryId:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: string
        total:
          type: number
        date:
          type: string
          format: date-time
        paymentId:
          type: string
        clientId:
          type: integer

    Vaccine:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Appointment:
      type: object
      properties:
        id:
          type: integer
        petId:
          type: integer
        professionalId:
          type: integer
        facilityId:
          type: integer
        dateTime:
          type: string
          format: date-time
        state:
          type: string

    Type:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
